type NewsletterEmailModel @model @searchable @auth(rules: [{allow: public}]) {
  id: ID!
  email: AWSEmail!
}

enum SizeTag {
  SMALL
  MEDIUM
  LARGE
}

enum InterestTag {
  COMMUNICATION
  ENVIRONMENT
  EDUCATION
  ENTERTAINMENT
  GAMING
  HEALTHCARE
  LIFESTYLE
}

enum DevelopmentTag {
  EMBEDDED_SYSTEMS
  FRONT_END
  WEB
  GAME_DEVELOPMENT
  MOBILE_APP
  COMPUTING
  APPLICATION_PROGRAMMING
  DEVOPS
  FULL_STACK
  BACKEND
  DATA_SCIENCE
  CLOUD
  DATABASE
  CYBERSECURITY
  ARTIFICIAL_INTELLIGENCE
  MACHINE_LEARNING
}

enum LanguageTag {
  C
  JAVA
  PYTHON
  C_PLUS_PLUS
  CUDA
  C_SHARP
  JAVASCRIPT
  HTML
  CSS
  PHP
  VISUAL_BASIC_DOTNET
  DOTNET
  R
  GO
  SWIFT
  PERL
  X86_ASSEMBLY
  ARM_ASSEMBLY
  RUBY
  MATLAB
  VISUAL_BASIC
  GROOVY
  OBJECTIVE_C
  OBJECTIVE_C_PLUS_PLUS
  RUST
  SAS
  SCRATCH
  WEB_ASSEMBLY
  D
  DART
  PL_SQL
  SQL
  DELHPI
  KOTLIN
  OPENEDGE_ABL
  JULIA
  SCALA
  LUA
  FORTRAN
  COBOL
  HASKELL
  VISUAL_BASIC_SCRIPT
  TYPESCRIPT
  BASH
  SHELL
  CLOJURE
  COFFEESCRIPT
  LISP
  CRYSTAL
  F_SHARP
  POSTSCRIPT
  HANDLEBARS
}

enum FrameworkTag {
  DJANGO
  ANGULAR_JS
  JQUERY
  ASP_NET
  GATSBY
  SVELTE
  YII
  TURBOGEARS
  YESOD
  GROK
  MOJOLICIOUS
  VAADIN
  RUBY_ON_RAILS
  EXPRESS JS
  METEOR
  CODEIGNITOR
  SYMFONY
  APACHE_WICKET
  PHALCON
  BOOTSTRAP
  SILEX
  FUELPHP
  CHERRYPY
  QUIOXTE
  LARAVEL
  FLASK
  CAKEPHP
  NEXT_JS
  GRAILS
  SPARK
  APACHE_STRUTS_1
  WEB2PY
  APACHE_PLAY 
}

enum CloudProviderTag {
  AMAZON_WEB_SERVICES
  MICROSOFT_AZURE
  GOOGLE_CLOUD_PLATFORM
  SALESFORCE
  IBM_CLOUD
  HEROKU
  NETAPP
}

enum DifficultyTag {
  GOOD_FIRST_PROJECT
  EXPERIENCED_CONTRIBUTOR
  EXPERT
}

enum ExperienceTag {
  BEGINNER
  MINIMAL_EXPERIENCE
  EXPERIENCED_CONTRIBUTOR
  EXPERT
}

enum AccountTag {
  DEVELOPER
  ORGANIZATION
}

enum ContributionTag {
  PULL_REQUEST
  ISSUE
  COMMENT
  REVIEW
}

enum OAuthProvider {
  GOOGLE
  GITHUB
}

type UsersModel @model @searchable @aws_cognito_user_pools @aws_iam @auth(rules: [{allow: public, operations: [read, create, delete, update]}]) {
  id: ID!
  user_name: String!
  email: String!
  password: String!
  profile_image: String
  user_posts: [PostsModel] @hasMany(indexName: "byUsersModel", fields: ["id"])
  user_comments: [CommentModel] @hasMany(indexName: "byUsersModel", fields: ["id"])
  first_name: String
  last_name: String
  user_creation_date: AWSDateTime
  github_link: AWSURL
  liked_posts: [ID]
  saved_posts: [ID]
  hide_posts: [ID]
  messages: [MessageModel] @hasMany(indexName: "byUsersModel", fields: ["id"])
  conversations: [ConversationModel] @manyToMany(relationName: "UsersConvo")
  lang_tag: [LanguageTag]
  dev_type_tag: [DevelopmentTag]
  interest_tag: [InterestTag]
  size_tag: [SizeTag]
  framework_tag: [FrameworkTag]
  difficulty_tag: [DifficultyTag]
  cloud_provider_tag: [CloudProviderTag]
  new_user: Boolean
  contributions: [ContributionsModel] @hasMany(indexName: "byUsersModel", fields: ["id"])
  credibility_score: Int
  involved_projects: [ID]
  experience_level: [ExperienceTag]
  years_of_experience: Int
  user_type: [AccountTag]
  user_experiences: [ExperienceModel] @hasMany(indexName: "byUsersModel", fields: ["id"])
  oauth_provider: OAuthProvider
  oauth_id: String
}

type ContributionsModel @model @searchable @auth(rules: [{allow: public, operations: [read, create, delete, update]}]) {
  id: ID!
  author: ID! @index(name: "byUsersModel")
  type: [ContributionTag]
  description: String
  link_to: AWSURL
  point_value: Int
}

type ExperienceModel @model @searchable @auth(rules: [{allow: public, operations: [read, create, delete, update]}]) {
  id: ID!
  user_id: ID! @index(name: "byUsersModel")
  org_name: String!
  image_link: String!
  start_date: AWSDate!
  end_date: AWSDate
  description: String!
  lang_tag: [LanguageTag]
  dev_type_tag: [DevelopmentTag]
  framework_tag: [FrameworkTag]
}

type PostsModel @model @searchable @auth(rules: [{allow: public, operations: [read, create, delete, update]}]) {
  id: ID!
  post_title: String!
  description: String
  long_description: String
  project_link: AWSURL
  image_link: String
  post_date: AWSDateTime
  userID: ID! @index(name: "byUsersModel")
  creator_name: String
  lang_tag: [LanguageTag]
  dev_type_tag: [DevelopmentTag]
  interest_tag: [InterestTag]
  size_tag: [SizeTag]
  framework_tag: [FrameworkTag]
  difficulty_tag: [DifficultyTag]
  cloud_provider_tag: [CloudProviderTag]
  likes: Int
  likes_users: [ID]
  saves: Int
  post_comments: [CommentModel] @hasMany(indexName: "byPostsModel", fields: ["id"])
  contributor_limit: Int
  contributors: [ID]
  reported: Boolean
  experience_level: [ExperienceTag]
  application: Boolean
  project_chat: ID! @index(name: "byConversationModel")
}

type ConversationModel @model @searchable @auth(rules: [{allow: public, operations: [read, create, delete, update]}]) {
  id: ID!
  users: [UsersModel] @manyToMany(relationName: "UsersConvo")
  title: String
}

type MessageModel @model @searchable @auth(rules: [{allow: public, operations: [read, create, delete, update]}]) {
  id: ID!
  message: String!
  from: ID! @index(name: "byUsersModel")
  message_date: AWSDateTime
  conversationID: ID! @index(name: "byConversationModel")
}

type CommentModel @model @searchable @auth(rules: [{allow: public, operations: [read, create, delete, update]}]) {
  id: ID!
  comment: String!
  profile_image: String
  comment_date: AWSDateTime
  parent_comment: ID
  replies: Int
  isReply: Boolean
  postID: ID! @index(name: "byPostsModel")
  userID: ID! @index(name: "byUsersModel")
  user_name: String!
}